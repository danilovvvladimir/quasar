generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  USER
  ADMIN
  SUPERADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
}

model User {
  id        String   @id @default(uuid())
  username  String
  password  String
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  wishlistItem WishlistItem[]
  role         Role[]
  review       Review[]
  cartItem     CartItem[]
  order        Order[]
}

model Role {
  id      String   @id @default(uuid())
  message RoleName @default(USER)

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model WishlistItem {
  id String @id @default(uuid())

  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id       String @id @default(uuid())
  size     Int
  quantity Int

  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id                 String   @id @default(uuid())
  name               String
  slug               String   @unique
  description        String
  price              Decimal
  discountPercentage Int      @default(0) @map("discount_percentage")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  categories   ProductCategory[]
  productImage ProductImage[]
  productSize  ProductSize[]
  review       Review[]
  cartItem     CartItem[]
  orderItem    OrderItem[]
  wishlistItem WishlistItem[]
}

model ProductImage {
  id        String @id @default(uuid())
  imagePath String

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
}

model ProductSize {
  id       String @id @default(uuid())
  size     Int
  quantity Int

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product ProductCategory[]
}

model ProductCategory {
  id String @id @default(uuid())

  Product    Product?  @relation(fields: [productId], references: [id])
  productId  String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Review {
  id        String   @id @default(uuid())
  text      String
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id          String      @id @default(uuid())
  orderStatus OrderStatus @default(PENDING) @map("order_status")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  orderItem OrderItem[]
}

model OrderItem {
  id         String  @id @default(uuid())
  quantity   Int
  totalPrice Decimal @map("total_price")

  orderId   String  @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
